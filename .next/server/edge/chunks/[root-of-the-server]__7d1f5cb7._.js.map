{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/helpers/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { IUser } from '@/models/user';\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET!;\r\n\r\nexport const generateToken = (user: IUser) => {\r\n  return jwt.sign(\r\n    { userId: user._id, role: user.role },\r\n    JWT_SECRET,\r\n    { expiresIn: '1h' }\r\n  );\r\n};\r\n\r\nexport const verifyToken = (token: string) => {\r\n  return jwt.verify(token, JWT_SECRET) as { userId: string; role: 'admin' | 'user' };\r\n};"],"names":[],"mappings":";;;;;;;;;;AAGA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAElC,MAAM,gBAAgB,CAAC;IAC5B,OAAO,IAAI,IAAI,CACb;QAAE,QAAQ,KAAK,GAAG;QAAE,MAAM,KAAK,IAAI;IAAC,GACpC,YACA;QAAE,WAAW;IAAK;AAEtB;AAEO,MAAM,cAAc,CAAC;IAC1B,OAAO,IAAI,MAAM,CAAC,OAAO;AAC3B"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { verifyToken } from './helpers/auth';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const { pathname } = request.nextUrl;\r\n\r\n  // Skip auth for public routes\r\n  if (pathname.startsWith('/login') || pathname.startsWith('/signup')) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  // Verify token\r\n  const token = request.cookies.get('token')?.value;\r\n  let verifiedToken;\r\n\r\n  try {\r\n    verifiedToken = token && verifyToken(token);\r\n  } catch (err) {\r\n    request.cookies.delete('token');\r\n  }\r\n\r\n  // Redirect to login if no valid token\r\n  if (!verifiedToken && !pathname.startsWith('/auth')) {\r\n    const loginUrl = new URL('/login', request.url);\r\n    loginUrl.searchParams.set('redirect', pathname);\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n\r\n  // Role-based redirection\r\n  if (verifiedToken) {\r\n    if (pathname.startsWith('/admin') && verifiedToken.role !== 'admin') {\r\n      return NextResponse.redirect(new URL('/dashboard', request.url));\r\n    }\r\n    \r\n    if (pathname.startsWith('/dashboard') && verifiedToken.role === 'admin') {\r\n      return NextResponse.redirect(new URL('/admin', request.url));\r\n    }\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\r\n};"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,8BAA8B;IAC9B,IAAI,SAAS,UAAU,CAAC,aAAa,SAAS,UAAU,CAAC,YAAY;QACnE,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,eAAe;IACf,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU;IAC5C,IAAI;IAEJ,IAAI;QACF,gBAAgB,SAAS,CAAA,GAAA,8HAAA,CAAA,cAAW,AAAD,EAAE;IACvC,EAAE,OAAO,KAAK;QACZ,QAAQ,OAAO,CAAC,MAAM,CAAC;IACzB;IAEA,sCAAsC;IACtC,IAAI,CAAC,iBAAiB,CAAC,SAAS,UAAU,CAAC,UAAU;QACnD,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,YAAY;QACtC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,yBAAyB;IACzB,IAAI,eAAe;QACjB,IAAI,SAAS,UAAU,CAAC,aAAa,cAAc,IAAI,KAAK,SAAS;YACnE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;QAChE;QAEA,IAAI,SAAS,UAAU,CAAC,iBAAiB,cAAc,IAAI,KAAK,SAAS;YACvE,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;IACF;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoD;AAChE"}}]
}